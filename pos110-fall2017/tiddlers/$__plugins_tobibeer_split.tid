author: Tobias Beer
core-version: >=5.1.9
created: 20170816193212375
dependents: 
description: A filter to split input titles and slice-up the results
documentation: https://tobibeer.github.io/tw5-split
list: readme
modified: 20170816193212375
plugin-type: plugin
source: https://github.com/tobibeer/tw5-split
title: $:/plugins/tobibeer/split
type: application/json
version: 0.8.0

{
    "tiddlers": {
        "$:/plugins/tobibeer/split/filter.js": {
            "text": "/*\\\r\ntitle: $:/plugins/tobibeer/split/filter.js\r\ntype: application/javascript\r\nmodule-type: filteroperator\r\n\r\nFilter operator that splits each item at a specified separator.\r\n\r\n@preserve\r\n\\*/\n(function(){\"use strict\";exports.split=function(s,t,e){var i,a,f=e.wiki,r=t.suffix||\"\",n=[],l=[],u=[],o=[],p={negate:t.prefix===\"!\",split:t.operand,prefix:\"\",suffix:\"\",num:1,$num:1},c=[[/^\\s+/,function(){}],[/^(num|pos|\\$num|\\$pos)=(n|-n|\\d+|-\\d+)(?:\\s|$)/i,function(s){p[s[1]]=s[2];if(s[1].charAt(0)===\"$\"){p.mode=\"$pos\"}if(s[1]===\"$num\"&&!p.$pos){p.$pos=1}if(s[1]===\"num\"&&!p.pos){p.pos=1}}],[/^(\\+|at|!at|first|!first|last|!last|list|keep|strict|\\$strict|trim|unique)(?:\\s|$)/i,function(s){var t=s[1];p[t]=1;switch(t){case\"+\":p.suffix=p.split;break;case\"!at\":p.nat=1;case\"at\":i=p.split.match(/(\\d+),(\\d+)/);if(i){p.at=parseInt(i[1]);p.to=parseInt(i[2])}else{p.at=parseInt(p.split)}if(isNaN(p.at)){throw\"suffix 'at' must be numeric: \"+p.at}else{p.at=p.at-1}break;case\"list\":p.list=\"list\";break;case\"first\":p.pos=1;break;case\"!first\":p.pos=2;p.num=\"n\";break;case\"last\":p.pos=\"n\";break;case\"!last\":p.pos=\"-2\";p.num=\"-n\";break}}],[/^(before|after|beforelast|afterlast)(?:\\s|$)/i,function(s){var t=s[1];p.before=(t.toLowerCase().indexOf(\"before\")===0?1:2)+(t.toLowerCase().indexOf(\"last\")===t.length-4?2:0)}],[/^list\\=\\s*([^\\s]+)(?:\\s|$)/i,function(s){p.list=s[1]}],[/^(\\!)?(\\$|\\$all|\\$first|\\$last)(?:\\s|$)/i,function(s){var t=s[2];p.mode=t;p.neg=s[1]?1:0;if(t===\"$first\"){if(p.neg){p.$pos=2;p.$num=\"n\"}else{p.$pos=1}}else if(t===\"$last\"){if(p.neg){p.$pos=\"-2\";p.$num=\"-n\"}else{p.$pos=\"n\"}}}],[/^(?:\\+\\\\([^\\\\]+)\\\\|\\\\([^\\\\]+)\\\\\\+)/,function(s){if(s[1]){p.prefix=s[1]}else{p.suffix=s[2]}}]];try{while(r){a=r;$tw.utils.each(c,function(s){var t=s[0].exec(r);if(t){s[1].call(this,t);r=r.substr(t[0].length);return false}});if(r===a){throw\"invalid suffix(es) '\"+r+\"'\"}}if(p.list&&p.split){o=$tw.utils.parseStringArray(p.split)}else{s(function(s,t){var e,a,r=[];l.push(t);if(p.before){i=1+(p.before<3?t.indexOf(p.split):t.lastIndexOf(p.split));if(i>0){r=[p.before%2===1?t.substr(0,i-1):t.substr(i+p.split.length-1)]}if(p.keep&&i===0){r[0]=t}}else if(p.at){if(p.to){r=p.nat?[t.substr(0,p.at)+t.substr(p.at+p.to)]:[t.substr(p.at,p.to)];if(p.keep&&r[0]===\"\"){r[0]=t}}else{r=[t.substr(0,p.at)];a=t.substr(p.at);if(a){r.push(a)}}}else if(p.list){r=f.getTiddlerList(t,p.list)}else{r=t.split(p.split)}e=r.length>1||p.list||r.length>0&&(p.before||p.to);if(p.pos){r=$tw.utils.getArrayItems(r,p.pos,p.num,p.strict)}if(r.length&&(e||p.keep)){n.push(t);$tw.utils.each(r,function(s){if(p.trim){s=s.trim()}if(s){if(!p.unique||p.unique&&o.indexOf(s)<0){o.push(p.prefix+s+p.suffix)}}})}else{u.push(t)}})}if(t.suffix){switch(p.mode){case\"$\":o=n;break;case\"$all\":if(o.length){if(p.negate){u=[]}else{o=l}}else if(p.negate){u=l}break;case\"$first\":case\"$last\":case\"$pos\":o=$tw.utils.getArrayItems(o,p.$pos,p.$num,p.$strict);break}}}catch($){return[\"split syntax error:\"+$]}return p.negate?u:o}})();",
            "title": "$:/plugins/tobibeer/split/filter.js",
            "type": "application/javascript",
            "module-type": "filteroperator"
        },
        "$:/plugins/tobibeer/split/readme": {
            "title": "$:/plugins/tobibeer/split/readme",
            "text": "Provides the filter `split[by]`, splitting input titles `by` a string defined in the operand, allowing you to slice and dice output elements as needed.\n\n; suffixes\r\n: `$` — return input titles that yield split items\r\n: `$all` — return all input titles if any yield split items\r\n: `+` — append operand to split titles\r\n: `+\\x\\` — append x to split titles\r\n: `\\x\\+` — prepend x to split titles\r\n: `unique` — prevents duplicate titles in the output\r\n: `trim` — no leading/trailing blanks in split titles\r\n: `first` — first title of the split => `!first` — all but first\r\n: `last` — last title of the split => `!last` — all but last\r\n: `at[<num>]` — split in two at number in the operand\r\n: `at[<num>,<len>]` — slice out ''len'' characters starting at character ''num''\r\n: `!at[<num>,<len>]` — cutting the above out of the input title\r\n: `before[x]` / `after[x]` — up until / after first match of `x`\r\n: `beforelast[x]` / `afterlast[x]`— up until / after last match of `x`\r\n: `pos=2` — 2nd split item of each input title in turn\r\n: `pos=1 num=3` — first three each\r\n: `pos=2 num=n` — 2nd to last each\r\n: `pos=-2 num=-n` — first to 2nd last each\r\n: `strict` — specified `num` is mandatory\r\n: `$pos`, `$num`, `$strict`, `$first`, `$!first`,`$last`, `$!last` — for final list\r\n: `keep` — return title even if not split\r\n: `list[]` — parse list field of input titles\r\n: `list=tags[]` — parse tags field of input titles\r\n: `list<foo>` — parse (soft) operand as list, e.g. variables or text-references\n\n<br>\n\n; documentation / examples / demos...\r\n: http://tobibeer.github.io/tw5-plugins#split"
        },
        "$:/plugins/tobibeer/split/utils.js": {
            "text": "/*\\\r\ntitle: $:/plugins/tobibeer/split/utils.js\r\ntype: application/javascript\r\nmodule-type: utils\r\n\r\n@preserve\r\n\\*/\n(function(){\"use strict\";exports.getArrayItems=function(e,t,n,s){var i,a=parseInt(n),f=parseInt(t),r=e.length;if(t===\"n\"){f=r}else if(t===\"-n\"){f=1}else if(!t){f=1}if(n===\"n\"){a=r}else if(n===\"-n\"){a=-(f<0?r+f+1:f)}else if(!n){a=1}f=Math.max(1,f<0?r+f+(a<0?a+2:1):a<0?f+a+1:f);a=Math.max(1,Math.abs(a));i=e.splice(f-1,a);if(i.length<a&&s){i=[]}return i}})();",
            "title": "$:/plugins/tobibeer/split/utils.js",
            "type": "application/javascript",
            "module-type": "utils"
        }
    }
}